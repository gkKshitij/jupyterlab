# -*- coding: utf-8 -*-
"""nm regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12WvWdAf-zIxWEOUz6AC6Ls1DJ6VCSiLt
"""

pip install yfinance

import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt

"""https://in.finance.yahoo.com/quote/INFY.NS/history?p=INFY.NS&.tsrc=fin-srch

https://in.finance.yahoo.com/quote/%5ENSEI/history?p=%5ENSEI&.tsrc=fin-srch

# 1
"""

df1 = yf.download('INFY.NS',start='2020-03-17',end='2021-03-19',progress=False)

df2 = yf.download('^NSEI',start='2020-03-17',end='2021-03-19',progress=False)

df1t=df1
df2t=df2

df1t.drop(df1t.columns[[0,1,2,3,5]], axis = 1, inplace = True) 
df2t.drop(df2t.columns[[0,1,2,3,5]], axis = 1, inplace = True)

df1t.rename(columns = {'Adj Close':'adjclose'}, inplace = True)
df2t.rename(columns = {'Adj Close':'adjclose'}, inplace = True)

# df1t

# df1t.adjclose

# df2t.adjclose

df3t=pd.merge(df1t, df2t, on='Date')

df3t

plt.scatter(df3t.adjclose_x, df3t.adjclose_y)
plt.title('Scatter plot')
plt.xlabel('infosys')
plt.ylabel('nifty 50')
plt.show()

len(df3t)



def estimate_coef(x, y):
    # number of observations/points
    n = np.size(x)
 
    # mean of x and y vector
    m_x = np.mean(x)
    m_y = np.mean(y)
 
    # calculating cross-deviation and deviation about x
    SS_xy = np.sum(y*x) - n*m_y*m_x
    SS_xx = np.sum(x*x) - n*m_x*m_x
 
    # calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1*m_x
 
    return (b_0, b_1)

def plot_regression_line(x, y, b):
    # plotting the actual points as scatter plot
    plt.scatter(x, y,
               marker = "o", s = 30)
 
    # predicted response vector
    y_pred = b[0] + b[1]*x
 
    # plotting the regression line
    plt.plot(x, y_pred, color = "g")
 
    # putting labels
    plt.xlabel('infosys')
    plt.ylabel('nifty50')
 
    # function to show plot
    plt.show()

x = np.array(df3t['adjclose_x'].tolist())
y = np.array(df3t['adjclose_y'].tolist())
 
    # estimating coefficients
b = estimate_coef(x, y)
print("Estimated coefficients:\n intercept = {}  \
      \n slope = {}".format(b[0], b[1]))

plot_regression_line(x, y, b)

n = np.size(x)
y_pred = b[0] + b[1]*x
m_y = np.mean(y)

print('squared error is', np.sum((y - y_pred)**2))
print('mean squared error is', (((np.sum((y - y_pred)**2)))/n))
print('root mean square error is', (np.sqrt((np.sum((y - y_pred)**2))/n)))
print('R square is', 1-((((np.sum((y - y_pred)**2))))/(np.sum((y - m_y)**2))))



"""## preparing data for using with skikit library for comparison"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm

xst = df3t['adjclose_x'].tolist()
xst = np.array(xst)
xst = xst.reshape(-1,1)

#xst

regression_model = LinearRegression()
  
regression_model.fit(xst, df3t.adjclose_y)
ypst = regression_model.predict(xst)
mse=mean_squared_error(df3t.adjclose_y,ypst)
  
rmse = np.sqrt(mean_squared_error(df3t.adjclose_y, ypst))
r2 = r2_score(df3t.adjclose_y, ypst)

print('Slope:' ,regression_model.coef_)
print('Intercept:', regression_model.intercept_)
print('MSE:',mse)
print('Root mean squared error: ', rmse)
print('R2 score: ', r2)

# df3t.to_csv('reg.csv', index = True)

